#+TITLE: Emacs Configuration
#+AUTHOR: Daniel Mai

I've been using Emacs extensively since the summer of 2013, and along
the way I've become accustomed to many different tweaks for it.

This configuration uses the [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley, which is
a fantastic way to manage package configurations.

If you see any keybindings that seem weird to you, it's probably
because I type with the Dvorak keyboard layout, so things'll probably
seem strange on other keyboard layouts. I may assign a keybinding just
because it's more on convenient on Dvorak. Though for the most part, I
try to follow Emacs and assign bindings by mnemonics, would should
make sense for any layout.

* Installing Emacs

On macOS, [[http://brew.sh/][homebrew]] is an easy way to install emacs.

To install the GUI version of Emacs:

#+begin_src sh
brew install homebrew/cask/emacs
#+end_src

* Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Daniel Mai"
      user-mail-address "daniel@danielmai.net")
#+end_src

* Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Theme

** Convenient theme functions

#+begin_src emacs-lisp
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "s-<f12>" 'switch-theme)
(bind-key "s-<f11>" 'disable-active-themes)
#+end_src

** Doom theme

#+BEGIN_SRC emacs-lisp :tangle no
(use-package doom-themes
  :ensure t
  :config
  (customize-set-variable 'doom-molokai-brighter-comments t)
  (switch-theme 'doom-molokai))
#+END_SRC

** Cyberpunk theme

The [[https://github.com/n3mo/cyberpunk-theme.el][cyberpunk theme]] is dark and colorful. However, I don't like the
boxes around the mode line.

#+begin_src emacs-lisp :tangle no
(use-package cyberpunk-theme
  :if (window-system)
  :ensure t
  :init
  (progn
    (load-theme 'cyberpunk t)
    (set-face-attribute `mode-line nil
                        :box nil)
    (set-face-attribute `mode-line-inactive nil
                        :box nil)))
#+end_src

I tend to switch themes more often than normal. For example, switching
to a lighter theme (such as the default) or to a different theme
depending on the time of day or my mood. Normally, switching themes is
a multi-step process with ~disable-theme~ and ~load-theme~. The
~switch-theme~ function will do that in one swoop. I just choose which
theme I want to go to.

** Solarized theme

Here's some configuration for [[https://github.com/bbatsov/solarized-emacs/][bbatsov's solarized themes]].

#+begin_src emacs-lisp :tangle no
(use-package solarized-theme
  :ensure t
  :init
  (setq solarized-use-variable-pitch nil)
  :config
  (switch-theme 'solarized-dark))
#+end_src

** Monokai theme

#+begin_src emacs-lisp
(use-package monokai-theme
  :if (window-system)
  :ensure t
  :init
  (setq monokai-use-variable-pitch nil)
  (switch-theme 'monokai))
#+end_src

** Waher theme

#+begin_src emacs-lisp :tangle no
(use-package waher-theme
  if (window-system)
  :ensure t
  :init
  (load-theme 'waher))
#+end_src

* Font

[[https://github.com/tonsky/FiraCode][Fira Code]] is a nice monospaced font.

To install it on macOS, you can use Homebrew with [[http://caskroom.io/][Homebrew Cask]].

#+begin_src sh :tangle no
# You may need to run these two lines if you haven't set up Homebrew
# Cask and its fonts formula.
brew install caskroom/cask/brew-cask
brew tap caskroom/fonts

brew cask install font-fira-code
#+end_src

To install it on Ubuntu, install the package ~fonts-firacode~.

#+BEGIN_SRC sh
sudo apt-get install fonts-firacode
#+END_SRC

And here's how we tell Emacs to use the font we want to use.

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist
             (cond
              ((string-equal system-type "darwin")
               (cond
                ((member "SF Mono" (font-family-list))
                 '(font . "SF Mono-11"))
                ((member "Fira Code" (font-family-list))
                 '(font . "Fira Code-11"))))
              ((string-equal system-type "gnu/linux")
               (cond
                ((member "Fira Code" (font-family-list))
                 '(font . "Fira Code-12"))))))
#+end_src

Note: To view all fonts that are available to use, run the following:

#+BEGIN_SRC emacs-lisp :tangle no
(font-family-list)
#+END_SRC

Display emojis. Source of system-specific fonts is in [[https://github.com/syohex/emacs-ac-emoji][the README for
the emacs-ac-emoji package.]]

#+BEGIN_SRC emacs-lisp
(let ((font (if (= emacs-major-version 25)
                "Symbola"
              (cond ((string-equal system-type "darwin")    "Apple Color Emoji")
                    ((string-equal system-type "gnu/linux") "Symbola")))))
  (set-fontset-font t 'unicode font nil 'prepend))
#+END_SRC

* Sane defaults

Let's start with some sane defaults, shall we?

Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+begin_src emacs-lisp
;; These functions are useful. Activate them.
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; Keep all backup and auto-save files in one directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top

;; Turn off the blinking cursor
(blink-cursor-mode -1)

(setq-default indent-tabs-mode nil)
(setq-default indicate-empty-lines t)

;; Don't count two spaces after a period as the end of a sentence.
;; Just one space is needed.
(setq sentence-end-double-space nil)

;; delete the region when typing, just like as we expect nowadays.
(delete-selection-mode t)

(show-paren-mode t)

(column-number-mode t)

(global-visual-line-mode)
(diminish 'visual-line-mode)

(setq uniquify-buffer-name-style 'forward)

;; -i gets alias definitions from .bash_profile
;; (setq shell-command-switch "-ic")

;; Don't beep at me
(setq visible-bell nil)
(setq ring-bell-function (lambda () nil))

(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)
#+end_src

The following function for ~occur-dwim~ is taken from [[https://github.com/abo-abo][Oleh Krehel]] from
[[http://oremacs.com/2015/01/26/occur-dwim/][his blog post at (or emacs]]. It takes the current region or the symbol
at point as the default value for occur.

#+begin_src emacs-lisp
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (thing-at-point 'symbol))
        regexp-history)
  (call-interactively 'occur))

(bind-key "M-s o" 'occur-dwim)
#+end_src

Here we make page-break characters look pretty, instead of appearing
as =^L= in Emacs. [[http://ericjmritz.name/2015/08/29/using-page-breaks-in-gnu-emacs/][Here's an informative article called "Using
Page-Breaks in GNU Emacs" by Eric J. M. Ritz.]]

#+begin_src emacs-lisp
(use-package page-break-lines
  :ensure t)
#+end_src

* Mac customizations

There are configurations to make when running Emacs on macOS (hence the
"darwin" system-type check).

#+begin_src emacs-lisp
(when (string-equal system-type "darwin")
  ;; Non-native fullscreen
  (setq ns-use-native-fullscreen nil)
  ;; delete files by moving them to the trash
  (setq delete-by-moving-to-trash t)
  (setq trash-directory "~/.Trash")

  ;; Don't make new frames when opening a new file with Emacs
  (setq ns-pop-up-frames nil)

  ;; set the Fn key as the hyper key
  (setq ns-function-modifier 'hyper)

  ;; Use Command-` to switch between Emacs windows (not frames)
  (bind-key "s-`" 'other-window)

  ;; Use Command-Shift-` to switch Emacs frames in reverse
  (bind-key "s-~" (lambda() () (interactive) (other-window -1)))

  ;; Because of the keybindings above, set one for `other-frame'
  (bind-key "s-1" 'other-frame)

  ;; Fullscreen!
  (setq ns-use-native-fullscreen nil) ; Not Lion style
  (bind-key "<s-return>" 'toggle-frame-fullscreen)

  ;; buffer switching
  (bind-key "s-{" 'previous-buffer)
  (bind-key "s-}" 'next-buffer)

  ;; Compiling
  (bind-key "H-c" 'compile)
  (bind-key "H-r" 'recompile)
  (bind-key "H-s" (defun save-and-recompile () (interactive) (save-buffer) (recompile)))

  ;; disable the key that minimizes emacs to the dock because I don't
  ;; minimize my windows
  ;; (global-unset-key (kbd "C-z"))

  ;; Not going to use these commands
  (put 'ns-print-buffer 'disabled t)
  (put 'suspend-frame 'disabled t))
#+end_src

~exec-path-from-shell~ makes the command-line path with Emacs's shell
match the same one on macOS.

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :init
  (exec-path-from-shell-initialize))
#+end_src

** Open other apps from Emacs

#+BEGIN_SRC emacs-lisp
(defun open-dir-in-finder ()
  "Open a new Finder window to the path of the current buffer"
  (interactive)
  (start-process "mai-open-dir-process" nil "open" "."))

(defun open-dir-in-iterm ()
  "Open the current directory of the buffer in iTerm."
  (interactive)
  (let* ((iterm-app-path "/Applications/iTerm.app")
         (iterm-brew-path "/opt/homebrew-cask/Caskroom/iterm2/1.0.0/iTerm.app")
         (iterm-path (if (file-directory-p iterm-app-path)
                         iterm-app-path
                       iterm-brew-path)))
    (start-process "mai-open-dir-process" nil "open" "-a" iterm-path ".")))

(defun open-dir-in-studio ()
  "Open the current directory in Android Studio."
  (interactive)
  (start-process "mai-open-dir-process" nil "studio" "."))

(bind-key "C-c o f" 'open-dir-in-finder)
(bind-key "C-c o t" 'open-dir-in-iterm)
(bind-key "C-c o a" 'open-dir-in-studio)
#+END_SRC

** El Capitan fixes

http://stuff-things.net/2015/10/05/emacs-visible-bell-work-around-on-os-x-el-capitan/

#+BEGIN_SRC emacs-lisp
(when (string-equal system-type "darwin")
  (let* ((cmd "sw_vers -productVersion")
         (macos-version (string-to-number
                         (cadr (split-string
                                (shell-command-to-string cmd)
                                "\\."))))
         (elcapitan-version 11))
    (when (>= macos-version elcapitan-version)
      (setq visible-bell nil)
      (setq ring-bell-function 'ignore)

      ;; El Capitan full screen animation is quick and delightful (enough to start using it).
      (setq ns-use-native-fullscreen t))))
#+END_SRC


** Title bar appearance

#+BEGIN_SRC emacs-lisp
(when (string-equal system-type "darwin")
  (add-to-list 'default-frame-alist
               '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist
               '(ns-appearance . dark))) ;; light or dark
#+END_SRC

* List buffers

ibuffer is the improved version of list-buffers.

#+begin_src emacs-lisp
;; make ibuffer the default buffer lister.
(defalias 'list-buffers 'ibuffer)
#+end_src


source: http://ergoemacs.org/emacs/emacs_buffer_management.html

#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'auto-revert-mode)

;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
#+end_src

source: [[http://whattheemacsd.com/sane-defaults.el-01.html][Magnars Sveen]]

* Recentf

#+begin_src emacs-lisp
(use-package recentf
  :config
  (recentf-mode t)
  (setq recentf-max-saved-items 500))
#+end_src

* Org mode

Truly the way to [[http://orgmode.org/][live life in plain text]]. I mainly use it to take
notes and save executable source blocks. I'm also starting to make use
of its agenda, timestamping, and capturing features.

It goes without saying that I also use it to manage my Emacs config.

** Installation

Although Org mode ships with Emacs, the latest version can be installed externally. The configuration here follows the [[http://orgmode.org/elpa.html][Org mode ELPA installation instructions]].

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  :pin gnu)
(use-package org-contrib
  :ensure t
  :pin nongnu)
#+END_SRC

On Org mode version 9 I wasn't able to execute source blocks out of the box. [[https://emacs.stackexchange.com/a/28604][Others have ran into the same issue too]]. The solution is to remove the .elc files from the package directory:

#+BEGIN_SRC sh :var ORG_DIR=(let* ((org-v (cadr (split-string (org-version nil t) "@"))) (len (length org-v))) (substring org-v 1 (- len 2)))
rm ${ORG_DIR}/*.elc
#+END_SRC

** Org activation bindings

Set up some global key bindings that integrate with Org Mode features.

#+begin_src emacs-lisp
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)
#+end_src

*** Org agenda

Learned about [[https://github.com/sachac/.emacs.d/blob/83d21e473368adb1f63e582a6595450fcd0e787c/Sacha.org#org-agenda][this =delq= and =mapcar= trick from Sacha Chua's config]].

#+begin_src emacs-lisp
(setq org-agenda-files
      (delq nil
            (mapcar (lambda (x) (and (file-exists-p x) x))
                    '("~/Dropbox/Agenda" "~/org/org-roam" "~/org/org-roam/daily"))))
(setq org-agenda-file-regexp "\\`[^.].*\\.org\\(\\.gpg\\)?\\'")
#+end_src

*** Org capture

#+begin_src emacs-lisp
(bind-key "C-c c" 'org-capture)
(setq org-default-notes-file "~/Dropbox/Notes/notes.org")
(setq org-capture-bookmark nil)
#+end_src

** Org setup

Speed commands are a nice and quick way to perform certain actions
while at the beginning of a heading. It's not activated by default.

See the doc for speed keys by checking out [[elisp:(info%20"(org)%20speed%20keys")][the documentation for
speed keys in Org mode]].

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src

Since v9.2 org mode changed the shortcut for template expansion to
~C-c C-,~. I'm still used to the old way though, so we can activate
the previous key bindings with ~org-tempo~.

#+begin_src emacs-lisp
(use-package org-tempo)
#+end_src

#+begin_src emacs-lisp
(setq org-image-actual-width 550)
#+end_src

#+BEGIN_SRC emacs-lisp
(setq org-highlight-latex-and-related
      ;; '(latex script entities)
      nil)
#+END_SRC

#+begin_src emacs-lisp
(use-package org
  :custom
  (org-adapt-indentation nil))
#+end_src

** Org tags

The default value is -77, which is weird for smaller width windows.
I'd rather have the tags align horizontally with the header. 45 is a
good column number to do that.

#+begin_src emacs-lisp
(setq org-tags-column 45)
#+end_src

** Org babel languages

#+BEGIN_SRC emacs-lisp
(use-package ob-restclient
  :ensure t)
#+END_SRC

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)
   (calc . t)
   (latex . t)
   (java . t)
   (ruby . t)
   (lisp . t)
   (scheme . t)
   (shell . t)
   (sqlite . t)
   (js . t)
   (restclient . t)
   (ledger . t)))

(defun my-org-confirm-babel-evaluate (lang body)
  "Do not confirm evaluation for these languages."
  (not (or (string= lang "C")
           (string= lang "java")
           (string= lang "python")
           (string= lang "emacs-lisp")
           (string= lang "sqlite"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src

** Org babel/source blocks

I like to have source blocks properly syntax highlighted and with the
editing popup window staying within the same window so all the windows
don't jump around. Also, having the top and bottom trailing lines in
the block is a waste of space, so we can remove them.

I noticed that fontification doesn't work with markdown mode when the
block is indented after editing it in the org src buffer---the leading
#s for headers don't get fontified properly because they appear as Org
comments. Setting ~org-src-preserve-indentation~ makes things
consistent as it doesn't pad source blocks with leading spaces.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+end_src

** Org templates

Source block templates

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
(add-to-list 'org-structure-template-alist '("md" . "src markdown"))
(add-to-list 'org-structure-template-alist '("gq" . "src graphql"))
#+END_SRC

** Org exporting

*** Pandoc exporter

Pandoc converts between a huge number of different file formats.

#+begin_src emacs-lisp
(use-package ox-pandoc
  :no-require t
  :defer 10
  :ensure t)
#+end_src
*** LaTeX exporting

I've had issues with getting BiBTeX to work correctly with the LaTeX exporter for PDF exporting. By changing the command to `latexmk` references appear in the PDF output like they should. Source: http://tex.stackexchange.com/a/161619.

#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process (list "latexmk -pdf %f"))
#+END_SRC

** Org present

#+begin_src emacs-lisp
(use-package org-present
  :ensure t
  :config
  (eval-after-load "org-present"
    '(progn
       (add-hook 'org-present-mode-hook
                 (lambda ()
                   (org-present-big)
                   (org-display-inline-images)
                   (org-present-hide-cursor)
                   (org-present-read-only)))
       (add-hook 'org-present-mode-quit-hook
                 (lambda ()
                   (org-present-small)
                   (org-remove-inline-images)
                   (org-present-show-cursor)
                   (org-present-read-write))))))
#+end_src
** Org todos

Tagging TODOs for Eisenhower Matrix prioritization, following [[https://klez.me/2019/10/22/using-the-eisenhower-matrix-in-emacs-org-mode/][Alessandro 'kLeZ' Accardo's setup]].

#+begin_src emacs-lisp
(setq org-tag-alist '(("important" . ?i)
                      ("urgent"    . ?u)))
(setq org-agenda-custom-commands
   '(("1" "Q1" tags-todo "+important+urgent")
     ("2" "Q2" tags-todo "+important-urgent")
     ("3" "Q3" tags-todo "-important+urgent")
     ("4" "Q4" tags-todo "-important-urgent")))
#+end_src

* Org-roam

#+begin_src emacs-lisp
(use-package org-roam
      :ensure t
      :hook
      (after-init . org-roam-setup)
      :init
      (setq org-roam-v2-ack t)
      :custom
      (org-roam-directory "~/org/org-roam")
      (org-roam-dailies-directory "~/org/org-roam/daily")
      ;; Use GPG
      (org-roam-capture-templates '(("d" "default" plain "%?" :target
                                     (file+head "%<%Y%m%d%H%M%S>-${slug}.org.gpg" "#+title: ${title}
")
;;                                      (file+head "%<%Y%m%d%H%M%S>.org.gpg" "#+title: ${title}
;; ")
                                     :unnarrowed t)))
      (org-roam-dailies-capture-templates '(("d" "default" entry
                                             "* %?\nEntered on %U"
                                             :if-new (file+head "~/org/org-roam/daily/%<%Y-%m-%d>.org.gpg"
                                                                "#+title: %<%Y-%m-%d>\n\n\n"))
                                            ("c" "code" entryq
                                             "* %?\n%a"
                                             :if-new (file+head "~/org/org-roam/daily/%<%Y-%m-%d>.org.gpg"
                                                                "#+title: %<%Y-%m-%d>\n\n"))))
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n g" . org-roam-graph)
             ("C-c d c" . org-roam-dailies-capture-today)
             ("<f8>" . org-roam-dailies-capture-today)
             ("C-c d t" . dmai/org-roam-dailies-find-today)
             ("s-t" . dmai/org-roam-dailies-find-today)
             :map org-mode-map
             (("C-c n i" . org-roam-node-insert))
             (("C-c n I" . org-roam-insert-immediate))))
(defun dmai/org-roam-dailies-find-today ()
  (interactive)
  (org-roam-dailies-find-today "d"))
(use-package org-roam-protocol)
#+end_src
* Tramp

#+begin_src emacs-lisp :tangle no
(use-package tramp)
#+end_src

* Locate

Using macOS Spotlight within Emacs by modifying the ~locate~ function.

I usually use [[*Helm][~helm-locate~]], which does live updates the spotlight
search list as you type a query.

#+begin_src emacs-lisp
;; mdfind is the command line interface to Spotlight
(setq locate-command "mdfind")
#+end_src

* Window

Convenient keybindings to resize windows.

#+begin_src emacs-lisp
(bind-key "s-C-<left>"  'shrink-window-horizontally)
(bind-key "s-C-<right>" 'enlarge-window-horizontally)
(bind-key "s-C-<down>"  'shrink-window)
(bind-key "s-C-<up>"    'enlarge-window)
#+end_src

Whenever I split windows, I usually do so and also switch to the other
window as well, so might as well rebind the splitting key bindings to
do just that to reduce the repetition.

#+begin_src emacs-lisp
(defun vsplit-other-window ()
  "Splits the window vertically and switches to that window."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil))
(defun hsplit-other-window ()
  "Splits the window horizontally and switches to that window."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil))

(bind-key "C-x 2" 'vsplit-other-window)
(bind-key "C-x 3" 'hsplit-other-window)
#+end_src

** Winner mode

Winner mode allows you to undo/redo changes to window changes in Emacs
and allows you.

#+begin_src emacs-lisp
(use-package winner
  :config
  (winner-mode t)
  :bind (("C-c <left>" . winner-undo)
         ("C-c <right>" . winner-redo)))
#+end_src

** Transpose frame

#+begin_src emacs-lisp
(use-package transpose-frame
  :ensure t
  :bind ("C-c t" . transpose-frame))
#+end_src

* Ido

#+begin_src emacs-lisp
(use-package ido
  :disabled t
  :init
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode t)
  (use-package ido-vertical-mode
    :ensure t
    :defer t
    :init (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only)))
#+end_src

* Whitespace mode

#+begin_src emacs-lisp
(use-package whitespace
  :bind ("<f10>" . whitespace-mode))
#+end_src

* Keybindings

** Revert buffer
#+BEGIN_SRC emacs-lisp
(bind-key "C-c u" #'revert-buffer)
#+END_SRC

* hippie-expand

#+BEGIN_SRC emacs-lisp
(use-package hippie-exp
  :bind (("C-c /" . hippie-expand))
  :config (setq hippie-expand-try-functions-list '(try-expand-line
                                                   try-complete-file-name-partially
                                                   try-complete-file-name
                                                   try-expand-all-abbrevs
                                                   try-expand-list
                                                   try-expand-dabbrev
                                                   try-expand-dabbrev-all-buffers
                                                   try-expand-dabbrev-from-kill
                                                   try-complete-lisp-symbol-partially
                                                   try-complete-lisp-symbol)))
#+END_SRC

* auth-sources

#+BEGIN_SRC emacs-lisp
(use-package auth-source
  :config
  (customize-set-variable 'auth-sources
                          '((:source "~/.authinfo.gpg"))))
#+END_SRC


* ELPA packages

These are the packages that are not built into Emacs.

** Ag

#+BEGIN_SRC emacs-lisp
(use-package ag
  :commands ag
  :ensure t)
#+END_SRC

** Ace Window

[[https://github.com/abo-abo/ace-window][ace-window]] is a package that uses the same idea from ace-jump-mode for
buffer navigation, but applies it to windows. The default keys are
1-9, but it's faster to access the keys on the home row, so that's
what I have them set to (with respect to Dvorak, of course).

#+begin_src emacs-lisp
(use-package ace-window
  :ensure t
  :config
  (setq aw-keys '(?a ?o ?e ?u ?h ?t ?n ?s))
  (ace-window-display-mode)
  :bind ("s-o" . ace-window))
#+end_src

** C-Eldoc
   :PROPERTIES:
   :GitHub:   https://github.com/mooz/c-eldoc
   :END:

This package displays function signatures in the mode line.

#+begin_src emacs-lisp
(use-package c-eldoc
  :commands c-turn-on-eldoc-mode
  :ensure t
  :init (add-hook 'c-mode-hook #'c-turn-on-eldoc-mode))
#+end_src

** Clojure

#+begin_src emacs-lisp
(use-package clojure-mode
  :defer t
  :ensure t)
#+end_src

*** Cider

#+begin_src emacs-lisp
(use-package cider
  :ensure t)
#+end_src

** Dash

Integration with [[http://kapeli.com/dash][Dash, the API documentation browser on macOS]]. The
binding ~s-D~ is the same as Cmd-Shift-D, the same binding that dash
uses in Android Studio (trying to keep things consistent with the
tools I use).

#+begin_src emacs-lisp
(use-package dash-at-point
  :if (string-equal system-type "darwin")
  :ensure t
  :bind (("s-D"     . dash-at-point)
         ("C-c e"   . dash-at-point-with-docset)))
#+end_src

** Dockerfile

#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :ensure t)
#+END_SRC

** EditorConfig

#+begin_src emacs-lisp
(use-package editorconfig
  :ensure t
  :pin nongnu)
#+end_src

** gist

#+begin_src emacs-lisp
(use-package gist
  :ensure t)
#+end_src

#+RESULTS:

** Kubernetes

#+BEGIN_SRC emacs-lisp
(use-package kubernetes
  :ensure t
  :commands (kubernetes-overview))
#+END_SRC

** Helm

#+begin_src emacs-lisp
(use-package helm
  :disabled t
  :ensure t
  :diminish helm-mode
  :bind (("C-c h" . helm-command-prefix)
         ("C-x b" . helm-mini)
         ("C-`" . helm-resume)
         ("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files)
         ("C-x C-r" . helm-recentf))
  :init
  (require 'helm-config)
  :config
  (setq helm-locate-command "mdfind -interpret -name %s %s"
        helm-ff-newfile-prompt-p nil
        helm-M-x-fuzzy-match t)
  (helm-mode))
(use-package helm-projectile
  :ensure t
  :after helm-mode
  :commands helm-projectile
  :bind ("C-c p h" . helm-projectile))
(use-package helm-ag
  :ensure t
  :after helm-mode)
(use-package helm-swoop
  :ensure t
  :after helm-mode
  :bind ("H-w" . helm-swoop))
#+end_src

** Ivy

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :diminish (ivy-mode . "")
  :bind
  (:map ivy-mode-map
   ("C-'" . ivy-avy))
  :config
  (ivy-mode 1)
  ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
  (setq ivy-use-virtual-buffers t)
  ;; number of result lines to display
  (setq ivy-height 10)
  ;; Show candidate index and total count
  (setq ivy-count-format "(%d/%d) ")
  ;; no regexp by default
  (setq ivy-initial-inputs-alist nil)
  ;; configure regexp engine.
  (setq ivy-re-builders-alist
	;; allow input not in order
        '((t   . ivy--regex-ignore-order))))
(use-package avy
  :ensure t
  :bind ("C-S-s" . avy-goto-char))
(use-package counsel
  :ensure t
  :bind (("M-x" . counsel-M-x)
         ("C-x C-r" . counsel-recentf)
         ("C-c h i" . counsel-imenu)
         ("C-h v" . counsel-describe-variable)
         ("C-h f" . counsel-describe-function)))
(use-package counsel-projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (counsel-projectile-mode)
  (setq counsel-projectile-switch-project-action 'dired))
(use-package swiper
  :ensure t
  :bind (("C-c s" . swiper)))
#+END_SRC

** Magit

A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :bind (("C-c g" . magit-status)
         ("C-c G" . magit-dispatch)
         ("C-c m l" . magit-log-buffer-file)
         ("C-c m b" . magit-blame))
  :config
  (setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
  (setq magit-diff-refine-hunk t)
  (remove-hook 'server-switch-hook 'magit-commit-diff))
#+end_src

*** Fullscreen magit

#+BEGIN_QUOTE
The following code makes magit-status run alone in the frame, and then
restores the old window configuration when you quit out of magit.

No more juggling windows after commiting. It's magit bliss.
#+END_QUOTE
[[http://whattheemacsd.com/setup-magit.el-01.html][Source: Magnar Sveen]]

#+begin_src emacs-lisp :tangle no
;; full screen magit-status
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))
#+end_src

*** Forge

Magit extension to interact with GitHub/GitLab.

#+BEGIN_SRC emacs-lisp
(use-package forge
  :ensure t
  :after magit)
#+END_SRC

** Edit With Emacs

Editing input boxes from Chrome with Emacs. Pretty useful to keep all
significant text-writing on the web within emacs. I typically use this
with posts on Discourse, which has a post editor that overrides normal
Emacs key bindings with other functions. As such, ~markdown-mode~ is
used.

#+begin_src emacs-lisp
(use-package edit-server
  :ensure t
  :config
  (edit-server-start)
  (setq edit-server-default-major-mode 'markdown-mode)
  (setq edit-server-new-frame nil))
#+end_src

** Elfeed

#+begin_src emacs-lisp :tangle no
(use-package elfeed
  :ensure t
  :defer t)
#+end_src

** Expand region

#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-c r" . er/expand-region))
#+end_src

** Flycheck

Still need to set up hooks so that flycheck automatically runs in
python mode, etc. js2-mode is already really good for the syntax
checks, so I probably don't need the jshint checks with flycheck for
it.

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer 10
  :config (setq flycheck-html-tidy-executable "tidy5"))
#+end_src

*** Linter setups

Install the HTML5/CSS/JavaScript linters.

#+begin_src sh
brew tap homebrew/dupes
brew install tidy
npm install -g jshint
npm install -g csslint
#+end_src

** Git Link

#+BEGIN_SRC emacs-lisp
(use-package git-link
  :ensure t)
#+END_SRC

** git-timemachine

#+begin_src emacs-lisp
(use-package git-timemachine
  :ensure t)
#+end_src

** graphviz-dot-mode

Create a ~.dot~ buffer in dot-mode and then quickly preview the rendered dot
diagram with ~C-c C-p~.

#+begin_src emacs-lisp
(use-package graphviz-dot-mode
  :ensure t)
#+end_src

** Macrostep

Macrostep allows you to see what Elisp macros expand to. Learned about
it from the [[https://www.youtube.com/watch?v%3D2TSKxxYEbII][package highlight talk for use-package]].

#+begin_src emacs-lisp
(use-package macrostep
  :ensure t
  :bind ("H-`" . macrostep-expand))
#+end_src

** Markdown mode

Install [[https://github.com/commonmark/cmark][cmark]] or your Markdown processor of choice and set it as ~markdown-command~ before using the live previewer commands.

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode))
  :config
  (setq markdown-command "cmark")
  (setq markdown-css-paths (list
                            (expand-file-name
                             (concat user-emacs-directory "misc/" "preview.css")))))
#+end_src

** Multiple cursors

We'll also need to ~(require 'multiple-cusors)~ because of [[https://github.com/magnars/multiple-cursors.el/issues/105][an autoload issue]].

#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->"         . mc/mark-next-like-this)
         ("C-<"         . mc/mark-previous-like-this)
         ("C-c C-<"     . mc/mark-all-like-this)
         ("C-!"         . mc/mark-next-symbol-like-this)))
#+end_src

** Mustache

#+BEGIN_SRC emacs-lisp
(use-package mustache-mode
  :ensure t)
#+END_SRC

** pinentry

#+begin_src emacs-lisp
(use-package pinentry
  :ensure t
  :if (string-equal system-type "gnu/linux")
  :config
  (pinentry-start))
#+end_src

** Projectile

#+BEGIN_QUOTE
Project navigation and management library for Emacs.
#+END_QUOTE
http://batsov.com/projectile/

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :commands (projectile-mode projectile-switch-project)
  :bind (("C-c p p" . projectile-switch-project)
         ("C-c p s s" . projectile-ripgrep)
         ("C-c p s r" . projectile-ripgrep))
  :config
  (setq projectile-keymap-prefix (kbd "C-c p"))
  (projectile-global-mode t)
  (setq projectile-enable-caching t)
  (setq projectile-switch-project-action 'projectile-dired))
#+end_src

** Python

Integrates with IPython.

#+begin_src emacs-lisp
(use-package python-mode
  :defer t
  :ensure t)
#+end_src

** Racket

Starting to use Racket now, mainly for programming paradigms class,
though I'm looking forward to some "REPL-driven development" whenever
I get the chance.

#+begin_src emacs-lisp
(use-package racket-mode
  :ensure t
  :commands racket-mode
  :config
  (setq racket-smart-open-bracket-enable t))

(use-package geiser
  :ensure t
  :defer t
  :config
  (setq geiser-default-implementation '(racket)))
#+end_src

** Restclient

See [[http://emacsrocks.com/e15.html][Emacs Rocks! Episode 15]] to learn how restclient can help out with
testing APIs from within Emacs. The HTTP calls you make in the buffer
aren't constrainted within Emacs; there's the
=restclient-copy-curl-command= to get the equivalent =curl= call
string to keep things portable.

#+begin_src emacs-lisp
(use-package restclient
  :ensure t
  :mode ("\\.restclient\\'" . restclient-mode))
#+end_src

** Smartscan

#+BEGIN_QUOTE
Quickly jumps between other symbols found at point in Emacs.
#+END_QUOTE
http://www.masteringemacs.org/article/smart-scan-jump-symbols-buffer


#+begin_src emacs-lisp
(use-package smartscan
  :ensure t
  :config (global-smartscan-mode 1)
  :bind (("s-n" . smartscan-symbol-go-forward)
         ("s-p" . smartscan-symbol-go-backward)))
#+end_src

** Smex

Smex integrates ido with ~M-x~. I used to use this before moving on to
[[*Helm][helm]].

#+begin_src emacs-lisp
(use-package smex
  :if (not (featurep 'helm-mode))
  :disabled t
  :ensure t
  :bind ("M-x" . smex))
#+end_src

** Smoothscrolling

This makes it so ~C-n~-ing and ~C-p~-ing won't make the buffer jump
around so much.

#+begin_src emacs-lisp :tangle no
(use-package smooth-scrolling
  :ensure t
  :config
  (smooth-scrolling-mode))
#+end_src

** Webmode

#+begin_src emacs-lisp :tangle no
(use-package web-mode
  :ensure t)
#+end_src

** Yasnippet

Yeah, snippets! I start with snippets from [[https://github.com/AndreaCrotti/yasnippet-snippets][Andrea Crotti's collection]]
and have also modified them and added my own.

It takes a few seconds to load and I don't need them immediately when
Emacs starts up, so we can defer loading yasnippet until there's some
idle time.

Setting =yas-indent-line= to ='fixed= fixes Python indentation
behavior when typing a templated snippet.

#+begin_src emacs-lisp :tangle no
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :config
  (setq yas-snippet-dirs (list (concat user-emacs-directory "snippets")))
  (setq yas-indent-line 'fixed)
  (yas-global-mode))
#+end_src

** Emmet

According to [[http://emmet.io/][their website]], "Emmet — the essential toolkit for web-developers."

#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :commands emmet-mode
  :config
  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hookg 'emmet-mode))
#+end_src

** Zoom-frm

=zoom-frm= is a nice package that allows you to resize the text of
entire Emacs frames (this includes text in the buffer, mode line, and
minibuffer). The =zoom-in/out= command acts similar to the
=text-scale-adjust= command---you can chain zooming in, out, or
resetting to the default size once the command has been initially
called.

Changing the =frame-zoom-font-difference= essentially enables a
"presentation mode" when calling =toggle-zoom-frame=.

#+begin_src emacs-lisp
(use-package frame-fns
  :load-path "site-lisp/frame-fns"
  :no-require t)
(use-package frame-cmds
  :load-path "site-lisp/frame-cmds"
  :no-require t)
(use-package zoom-frm
  :load-path "site-lisp/zoom-frm"
  :bind (("C-M-=" . zoom-in/out)
         ("H-z"   . toggle-zoom-frame)
         ("s-<f1>" . toggle-zoom-frame))
  :config
  (setq frame-zoom-font-difference 10))
#+end_src

** display-time-mode

#+begin_src emacs-lisp
(use-package time
  :config
  (display-time-mode))
#+end_src

** Scratch

Convenient package to create =*scratch*= buffers that are based on the
current buffer's major mode. This is more convienent than manually
creating a buffer to do some scratch work or reusing the initial
=*scratch*= buffer.

#+begin_src emacs-lisp
(use-package scratch
  :ensure t
  :commands scratch)
#+end_src

** Shell pop

#+BEGIN_SRC emacs-lisp
(use-package shell-pop
  :ensure t
  :bind ("M-<f12>" . shell-pop))
#+END_SRC

** SLIME

The Superior Lisp Interaction Mode for Emacs. First, Install SBCL with
brew.

#+BEGIN_SRC sh
brew install sbcl
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package slime
  :ensure t
  :defer 10
  :init
  (setq inferior-lisp-program "/usr/local/bin/sbcl")
  (add-to-list 'slime-contribs 'slime-fancy))
#+END_SRC

** Quickrun

#+BEGIN_SRC emacs-lisp
(use-package quickrun
  :defer 10
  :ensure t
  :bind ("C-c r" . quickrun))
#+END_SRC

** Visible mode

I found out about this mode by looking through simple.el. I use it to
see raw org-mode files without going to a different mode like
text-mode, which is what I had done in order to see invisible text
(with org hyperlinks). The entire buffer contents will be visible
while still being in org mode.

#+begin_src emacs-lisp
(use-package visible-mode
  :bind (("H-v" . visible-mode)
         ("s-<f2>" . visible-mode)))
#+end_src

** Undo Tree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t)
#+END_SRC

** Crux

Collection of Ridiculously Useful eXtensions

#+BEGIN_SRC emacs-lisp
(use-package crux
  :ensure t
  :bind (("C-c o o" . crux-open-with)
         ("C-c o u" . crux-view-url)))
#+END_SRC
** graphql-mode

#+BEGIN_SRC emacs-lisp
(use-package graphql-mode
  :mode (("\\.q\\'" . graphql-mode))
  :ensure t)
#+END_SRC

** json-mode

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :ensure t
  :config
  (customize-set-variable 'json-mode-hook
                          #'(lambda ()
                              (setq tab-width 2))))
#+END_SRC

** terraform-mode

#+begin_src emacs-lisp
(use-package terraform-mode
  :ensure t
  :config
  (add-hook 'terraform-mode-hook (lambda ()
                                (add-hook 'before-save-hook #'terraform-format-buffer nil 'make-it-local))))
#+end_src

** terminal-here

#+begin_src emacs-lisp
(use-package terminal-here
  :ensure t
  :bind (("C-c o t" . terminal-here-launch)
         ("C-c o p" . terminal-here-project-launch)))
#+end_src
** yaml-mode

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t)
#+END_SRC

** company-mode

Auto completion.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package company
  :ensure t
  :config
  (setq company-tooltip-limit 20)
  (setq company-idle-delay 0.0)
  (setq company-echo-delay 0)
  (setq company-begin-commands '(self-insert-command))
  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (define-key company-active-map (kbd "C-p") #'company-select-previous))
#+END_SRC

** go-mode

First, install all of the Go tools.

#+BEGIN_SRC
go get -u golang.org/x/tools/...
#+END_SRC

This includes tools like, ~godef~, ~goimports~, and ~guru~ which are used in this config.

#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :ensure t
  :hook (before-save . gofmt-before-save)
  :config
  (bind-key "C-." #'lsp-find-definition go-mode-map)
  (bind-key "C-x 4 C-." #'godef-jump-other-window go-mode-map)
  (bind-key "C-c C-o r" #'lsp-find-references go-mode-map)
  (bind-key "C-c C-r" #'go-remove-unused-imports)
  (bind-key "C-c C-c" #'compile go-mode-map)
  (setq gofmt-command "goimports")
  (customize-set-variable 'go-mode-hook
                          #'(lambda ()
                              (setq tab-width 4)
                              (setq display-line-numbers t))))
(defun dmai/swap-display-line-numbers ()
  (interactive)
  (if (string-equal display-line-numbers 'relative)
      (setq display-line-numbers 'absolute)
    (setq display-line-numbers 'relative)))
(bind-key "<f9>" #'dmai/swap-display-line-numbers)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package company-go
  :ensure t
  :config
  (add-hook 'go-mode-hook (lambda ()
                            (set (make-local-variable 'company-backends)
                                 '(company-go))
                            (company-mode))))
#+END_SRC

#+begin_src emacs-lisp
(use-package gotest
  :ensure t
  :bind (:map go-mode-map
              ("C-c C-t p" . go-test-current-project)
              ("C-c C-t f" . go-test-current-file)
              ("C-c C-t ." . go-test-current-test)
              ("C-c r" . go-run))
  :config
  (setq go-test-verbose t))
#+end_src

#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :after go-mode
  :hook (go-mode . lsp-deferred)
  :commands (lsp lsp-deferred)
  :config
  (setq lsp-enable-snippet nil))

;; optional - provides fancier overlays
(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode)

;; if you use company-mode for completion (otherwise, complete-at-point works out of the box):
(use-package company-lsp
  :ensure t
  :commands company-lsp)
#+end_src

#+begin_src emacs-lisp
(use-package go-tag
  :ensure t)
#+end_src

** jade-mode

#+BEGIN_SRC emacs-lisp
(use-package jade-mode
  :ensure t
  :config
  (add-hook 'jade-mode-hook
            #'(lambda ()
                (setq tab-width 2)
                (setq indent-tabs-mode t))))
#+END_SRC
** nginx-mode

#+BEGIN_SRC emacs-lisp
(use-package nginx-mode
  :ensure t
  :config
  (setq nginx-indent-level 2))
#+END_SRC
** Keychain

Install [[https://www.funtoo.org/Keychain][~keychain~]] first, which will manage the SSH agent on Linux
systems. This is useful when using SSH keys with passwords, such as
with SSH git access or SSHing into other machines. The following must
be run already before starting Emacs.

#+BEGIN_SRC sh
eval "$(keychain --eval --agents ssh id_rsa)"
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package keychain-environment
  :if (string-equal system-type "gnu/linux")
  :ensure t
  :config
  (keychain-refresh-environment))
#+END_SRC

* Computer-specific settings

Load some computer-specific settings, such as the name and email
address. The way the settings are loaded is based off of [[https://github.com/magnars/.emacs.d][Magnar
Sveen's]] config.

In my case, the computers I use usually use the same username (my
name, go figure), so instead of basing the specific settings from the
username, I use the hostname. The ~system-name~ is a built-in function
which returns the host name of the machine you are running on, as a string.

#+begin_src emacs-lisp
(defvar mai/user-settings-dir nil
  "The directory with user-specific Emacs settings for this
  user.")

;; Settings for currently logged in user
(setq mai/user-settings-dir
      (concat user-emacs-directory "users/" (system-name)))
(setq mai/user-local-settings-dir
      (concat user-emacs-directory "users" "/" "local"))
(add-to-list 'load-path mai/user-settings-dir)
(add-to-list 'load-path mai/user-local-settings-dir)

;; Load settings specific for the current user
(when (file-exists-p mai/user-settings-dir)
  (mapc 'load (directory-files mai/user-settings-dir nil "^[^#].*el$")))
(when (file-exists-p mai/user-local-settings-dir)
  (mapc 'load (directory-files mai/user-local-settings-dir nil "^[^#].*el$")))
#+end_src

** Finda

#+BEGIN_SRC emacs-lisp
(load "~/.finda/integrations/emacs/finda.el" t)
#+END_SRC

* Languages
** C/Java

I don't like the default way that Emacs handles indentation. For instance,

#+begin_src C
int main(int argc, char *argv[])
{
  /* What's with the brace alignment? */
  if (check)
    {
    }
  return 0;
}
#+end_src

#+begin_src java
switch (number)
    {
    case 1:
        doStuff();
        break;
    case 2:
        doStuff();
        break;
    default:
        break;
    }
#+end_src

Luckily, I can modify the way Emacs formats code with this configuration.

#+begin_src emacs-lisp
(defun my-c-mode-hook ()
  (setq c-basic-offset 4)
  (c-set-offset 'substatement-open 0)   ; Curly braces alignment
  (c-set-offset 'case-label 4))         ; Switch case statements alignment

(add-hook 'c-mode-hook 'my-c-mode-hook)
(add-hook 'java-mode-hook 'my-c-mode-hook)
#+end_src

* Misc
** Non-ELPA packages

Some packages aren't in ELPA, so they're stored in the [[file:site-lisp][site-lisp]]
directory and loaded here.

*** Titlecase

As in the titlecase package instructions, the titlecase command needs to be in the $PATH for this to work.

#+BEGIN_SRC emacs-lisp
(use-package titlecase
  :load-path "~/.emacs.d/site-lisp")
#+END_SRC

** Display Time

When displaying the time with =display-time-mode=, I don't care about
the load average.

#+begin_src emacs-lisp
(setq display-time-default-load-average nil)
#+end_src

** Display Battery Mode

See the documentation for =battery-mode-line-format= for the format
characters.

#+begin_src emacs-lisp
(setq battery-mode-line-format "[%b%p%% %t]")
#+end_src

** Docview keybindings

Convenience bindings to use doc-view with the arrow keys.

#+begin_src emacs-lisp
(use-package doc-view
  :commands doc-view-mode
  :config
  (define-key doc-view-mode-map (kbd "<right>") 'doc-view-next-page)
  (define-key doc-view-mode-map (kbd "<left>") 'doc-view-previous-page))
#+end_src

** OS X scrolling

#+begin_src emacs-lisp
(setq mouse-wheel-scroll-amount (quote (0.01)))
#+end_src

** Emacsclient

#+begin_src emacs-lisp
(use-package server
  :config
  (server-start))
#+end_src

** Dired

#+BEGIN_SRC emacs-lisp
(use-package dired
  :config
  (customize-set-variable 'dired-listing-switches
                          "-avl")
  (customize-set-variable 'dired-dwim-target t))
#+END_SRC
** Typescript

#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :ensure t)
#+END_SRC
** Settings

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)
#+END_SRC

